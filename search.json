[{"title":"vue中使用keep-alive","url":"%2F2021%2F04%2F18%2Fvue%E4%B8%AD%E4%BD%BF%E7%94%A8keep-alive%2F","content":"\n## keep-alive\n\n ![](.\\vue中使用keep-alive\\bg.jpg)\n\n**keep-alive 是 Vue 的内置组件，当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们**。和 transition 相似，keep-alive 是一个抽象组件：它自身不会渲染成一个 DOM 元素，也不会出现在父组件链中。 \n\n## 作用\n\n 在组件切换过程中将状态保留在内存中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验性 。\n\n## 原理\n\n在 **created 生命周期函数调用时将需要缓存的 VNode 节点保存在 this.cache 中／在 render（页面渲染） 时**，如果 VNode 的 name 符合缓存条件（**可以用 include 以及 exclude 控制**），则会从 this.cache 中取出之前缓存的 VNode 实例进行渲染。\n\nVNode：虚拟DOM，其实就是一个JS对象\n\n## props\n\n- `include` - 字符串或正则表达式。只有名称匹配的组件会被缓存。\n- `exclude` - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。\n- `max` - 数字。最多可以缓存多少组件实例。\n\n 【 vue 2.1.0 新增 】`include` 和 `exclude` prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个**数组**来表示： \n\n**使用用法：**\n\n```vu\n<!-- 逗号分隔字符串 -->\n<keep-alive include=\"a,b\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 正则表达式 (使用 `v-bind`) -->\n<keep-alive :include=\"/a|b/\">\n  <component :is=\"view\"></component>\n</keep-alive>\n\n<!-- 数组 (使用 `v-bind`) -->\n<keep-alive :include=\"['a', 'b']\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n\n \n\n## 生命周期\n\n- activated： 在 keep-alive 组件激活时调用 。\n- deactivated：在 keep-alive 组件停用时调用\n\n在使用过keep-alive后，再次进来之后页面不会进行数据请求。如果想要再次进入想要页面刷新就可以在activated钩子函数中调用数据请求。\n\n **在服务端渲染ssr时，这些钩子函数也不会被调用。** \n\n\n\n## 基础使用\n\n1.使用keep-alive包着想要缓存组件，（包含router-view是为了缓存所有页面）。\n\nApp.vue文件中：\n\n```vue\n<template>\n  <div id=\"app\">\n  \t<keep-alive>\n      <router-view/>\n    </keep-alive>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\n2.局部缓存，结合keep-alive的属性include和exclude，结合router配置。\n\nApp.vue文件中：\n\n```vue\n<template>\n  <div id=\"app\">\n  \t<keep-alive>\n      <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n    </keep-alive>\n    <router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\nrouter配置文件\n\n```js\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home,\n      redirect: 'index',\n      children: [\n        {\n          path: 'index',\n          name: 'index',\n          component: Index,\n          meta: {\n        \tkeepAlive: false // 不需要缓存\n      \t  }\n        },\n        {\n          path: 'user',\n          name: 'user',\n          component: User,\n          meta: {\n        \tkeepAlive: true  // 需要缓存\n      \t  }\n        },\n       ]\n    }\n  ]\n})\n```\n\n<span style=\"color:red;font-weight:700;\">include结合vuex使用：</span>\n\n我们可以借用vuex，动态捕获路由中`meta.keepAlive = true`配置的组件页面，切记**组件name命名要和路由name设置保持一致，因为include里面匹配的是组件name**。\n\n\n\n**使用include/exclude 属性需要给所有vue类的name赋值（注意不是给route的name赋值），否则 include/exclude不生效**\n\n\n\n正确写法是：\n\n```js\nexport default {\n name:'a', // include 或 exclude所使用的name\n data () {\n return{\n    }\n  },\n}\n```\n\n路由：\n\n```vue\n// 保持 name为a和b的组件\n<keep-alive include=\"a,b\">\n    <router-view/>\n</keep-alive>\n```\n\n","tags":["vue"],"categories":["Vue"]},{"title":"Markdown格式语法(进阶篇)","url":"%2F2019%2F09%2F25%2FMarkdown%E6%A0%BC%E5%BC%8F%E8%AF%AD%E6%B3%95-%E8%BF%9B%E9%98%B6%E7%AF%87-%2F","content":"\n# Markdown格式语法(进阶篇)\n\n## 1.YAML题头\n\n**YAML**（/ˈjæməl/，尾音类似*camel*骆驼）是一个可读性高，用来表达数据序列化的格式。(from baidu)\n\n在这里呢，我只接触hexo博客书写的题头，具体的语法自行百度\n<!--more-->\neg:\n\n```markdown\n---       \n        title: CSS权重计算\n        date: 2019-09-19\n        tags:\n            css\n        categories: Web前端\n---\n```\n\n<span style=\"color: #dc3545;\">补充：</span> YAML在hexo博客是一个扩展语法，用来表示文本信息让博客来识别，但是这里与markdown语法没有太大联系，适当了解即可\n\n<span style=\"color: #dc3545;\">注意：</span> 一定要写在文章头部，英文冒号之后加一个空格\n\n---\n\n## 2.注脚\n\n显而易见，就像小学课本上的文言文注解一样\n\neg:\n\n```markdown\n[^注脚标识符]\t\t[^注脚标识符]:注脚内容\n```\n\n样式展示：\n\n上邪[^1]  \n\n[^1]:这里真的是一个注释啊！\n\n<span style=\"color: #dc3545;\">注意：</span> 每个md编译器的展示效果都是不太一样的 \n\n---\n\n## 3.作品标记\n\n**html**\n\neg:\n\n```html\n<cite>《诗经》</cite>\n```\n\n效果展示：<cite>《诗经》</cite>\n\n**markdown**\n\nmarkdown中常使用 \"\" 《诗经》 \"\" ，这里好像没有显示(每个md编译器效果都不一样)不太常用\n\n---\n\n## 4.缩写\n\n常见在英文缩写，鼠标移动上去时会显示全写\n\n**html**\n\neg:\n\n```html\n<abbr title=\"HyperText Markup Language\">HTML</abbr>\n```\n\n展示效果：<abbr title=\"HyperText Markup Language\">HTML</abbr>\n\n**markdown**\n\neg:\n\n```markdown\n*[HTML]:HyperText Markup Language\t\t\tHTML\n```\n\n*[HTML]: HyperText Markup Language\n\n展示效果：  HTML \n\n他就像是一个自定义变量，然后再引用\n\n---\n\n## 5.自定义div\n\n用不少于3个的:,冒号后面紧跟的是类名(不是所有的编译器都能够支持这种效果，不显示也很正常)\n\neg:\n\n```markdown\n:::normol\n\nhello world\n\n :::\n```\n\n效果展示：\n\n :::normol\n\nhello world\n\n :::\n\n---\n\n## 6.表格\n\nhtml中的table，tr,th,td标签就不再多赘述了，重点是markdown的语法格式\n\neg:\n```markdown\n|th1|th2|th3|\n|:--|:--:|--:|\n|hello|hello|hello|\n\n```\n\n效果展示：\n\n|th1|th2|th3|\n|:--|:--:|--:|\n|hello|hello|hello|\n\n<span style=\"color: #dc3545;\">注意：</span> 其中的冒号分别代表着左对齐、居中对齐、右对齐,中间至少要用一个减号分割(一些md编译器不支持表格布局);中间减号在一些编译器中有一些权重，减号越多列宽越大\n\n---\n\n## 7.emoji表情\n\nemoji是markdown中的扩展语法，是不包括emoji表情的\n\neg:\n\n```markdown\n:smile:\n```\n\n效果展示：\n\n:smile:\n\n其他更多的emoji表情请自行百度markdown中emoji代码github:smile::smile:\n\n---\n\n## 8.TODO list\n\neg:\n\n```markdown\n*TODAY\n-[ ] READING\n-[X] DO HOMEWORK\n- WALKING\n```\n\n效果展示：\n\n* TODAY\n  - [ ] READING\n  - [x] DO HOMEWORK\n  - WALKING\n\n有些编译器可以选中，一般都会在无序列表中实现\n\n---\n\n## 9.LaTax(学术排版)--MathJax\n\n支持LaTax算是markdown扩展中的恐怖之处了\n\neg:\n\n```markdown\n$$\n\t\\begin{equation}\\int_0^\\infty\\frac{x^3}{e^x-1}\\,dx=\\frac{\\pi^4}{15}\\end{equation}\n$$\n\n```\n\n效果展示：\n$$\n\\begin{equation}\n\\int_0^\\infty\\frac{x^3}{e^x-1}\\,dx=\\frac{\\pi^4}{15}\n\\end{equation}\n$$\neg:\n\n```markdown\n$$\n\t\\sum_{i=0}N\\int_{a}{b}g(t,i)\\text{d}t\n$$\n\t\t\t\t\t\n```\n\n效果展示：\n$$\n\\sum_{i=0}N\\int_{a}{b}g(t,i)\\text{d}t\n$$\n\n---\n\n到这里就是我所了解的markdown语法的全部了，感兴趣的小伙伴，可以深入去了解一下。markdown的编译器有很多我就不在推荐了，大家可以下载体验一下，非常有趣。希望能够得到更多支持，谢谢:kissing_heart::kissing_heart::kissing_heart:\n\n","tags":["markdown"],"categories":["markdown_study"]},{"title":"Markdown格式语法(基础篇)","url":"%2F2019%2F09%2F25%2FMarkdown%E6%A0%BC%E5%BC%8F%E8%AF%AD%E6%B3%95-%E5%9F%BA%E7%A1%80%E7%AF%87-%2F","content":"\n# Markdown格式语法(基础篇)\n\n### 1.斜体、粗体\n\n#### html\n\n1.斜体:可以用<em></em>标签来表示\n\neg:<em>斜体</em>\n\n2.粗体:可以用<strong></strong>标签来表示\n\neg:<strong>粗体</strong>\n<!--more-->\n\n#### Markdown\n\n1.斜体:可以用*或_引用\n\neg:*斜体*\t_斜体_\n\n2.粗体:可以用**或__引用\n\neg:**粗体**  __粗体__\n\n---\n\n### 2.标题 h1~h6\n\n#### html\nh1~h6标签来表示标题等级\t\t\neg:\n\n```html\n<h1>一级标题1</h1>\n```\n\n\n\n#### Markdown\n\n等级标题用#来表示，#越多标题越小，最多好像只有六个，再多就无效了  eg:\n\neg:# 一级标签\n\n注意：补充！标题+回车+‘====’(两个等号以上)=一级标题\n\n​\t\t\t\t\t\t标题+回车+‘------’(两个减号以上)=二级标题\n\n---\n\n### 3.超链接\n\n#### html\n\n一对a标签，教你超链接！！hahaha~~\n\neg:<a href='https://www.bilibili.com/' title='B站'>bilibili</a>\n\n#### Markdown\n\n语法标识:[]内为文本,()为链接地址;另一种为<>直接加地址\n\neg:[bilibili](https://www.bilibili.com/ \"bilibili\")\n\neg:<https://www.bilibili.com/>\n\n---\n\n### 4.上标与下标\n\n#### html\n\n上标标签是<sup></sup>,下标标签是<sub></sub>(向上指的有没有haha~~)\n\neg:这是一个<sup>上标</sup>\t\t这里还有一个<sub>下标</sub>\n\n#### Markdown\n\n上标呢是被^围起来的；下标没有向下的，那就用~浪起来吧！\n\neg:这是一个小 ^ 上标 ^      这是一个 ~ 下标 ~\n\n---\n\n### 5.标记文本\n\n#### html\n\n标记文本用mark标签使用的\neg:          \n\n```html\n<mark>标记文本</mark>\n```\n\n效果展示：<mark>标记文本</mark>\n\n#### Markdown\t\n\neg: \n\n```markdown\n==标签内容==\n```\n\n效果展示：==标记文本==\n\n---\n\n### 6.下划线\n\n下划线使用u标签\n\neg:\n\n​\t\n\n```html\n<u>下划线</u>\n```\n\n​\t\t\t\t\n\n效果展示：<u>下划线</u>\n\n注：有些markdown的编译器不支持一些表示\n\n### 7.删除线\n\n#### html\n\n删除线可以用del标签来表示\n\neg:\n\n```html\n<del>删除线</del>\n```\n\n效果展示：<del>删除线</del>\n\n#### Markdown\n\n用两个~围起来表示删除线\n\neg:\n\n```markdown\n~~删除线~~\n```\n\n效果展示：~~删除线~~\n\n---\n\n### 8.有无序列表\n\n#### 无序列表\n\n**html**\n\neg:\n\n```html\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n```\n\n效果展示：\n\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n\n**markdown**\n\n&emsp;除了使用*之外，还可以使用-和+。但是一定要注意放在一行开头，而且符号(-,+,星号)要和列表内容空一格,除此之外，有无序列表都可以相互嵌套\n\neg:\n\n​\t\n\n```markdown\n* 列表项1\n```\n\n​\t\t\t\t\t\n\n效果展示如下\n\n* 列表项1\n\n+ 列表项2\n  - 列表项\n\n#### 有序列表\n\n**html**\n\neg:\n\n```html\n<ol type=\"I\">\n    <li>item1</li>\n    <li>item2</li>\n    <li>item3</li>\n</ol>\n```\n\n效果展示：\n\n<ol type=\"I\">\n    <li>item1</li>\n    <li>item2</li>\n    <li>item3</li>\n</ol>\n\n**markdown**\n\n直接写1.或者A.等，如果想追求较好的效果可以用html来编写\n\n---\n\n### 9.文字引用\n\n用来引用名人的格言警句\n\n**html**\n\neg:\n\n```html\n<blockquote>名言</blockquote>\n```\n\n效果展示：\n\n<blockquote><p style=\"text-align: center;  color: #dc3545; font-size: 20px\">上邪</p> \n    <p style=\"text-align: center\">【作者】佚名 【朝代】汉</p>\n    上邪，\n我欲与君相知，\n长命无绝衰。\n山无陵，\n江水为竭。\n冬雷震震，\n夏雨雪。\n天地合，\n乃敢与君绝。\n</blockquote>\n\n**markdown**\n\n这里使用就会很简单了，直接用>就可以了，而且文字引用还可以嵌套，but样式在这里真的很难搞\n\neg:\n\n```markdown\n>名言\n>>名言\n```\n\n效果展示:\n\n>山无陵，江水为竭。冬雷震震，夏雨雪。\n>\n>> >天地合，乃敢与君绝。\n\n---\n\n### 10.行内代码,代码块\n\n为了在保留鲜活的代码，hahaha~~~\n\n**html**\n\n行内代码用code标签引用，代码块可以用pre标签引用\n\neg:\n\n```html\n<code>HTML</code>\n```\n\n效果展示：<code>HTML</code>\n\n<span style=\"color: #dc3545;\">补充：</span>还有一种可以用\\将代码转义\n\neg:\n\n```html\n\\<html>\n    \\<head>\n    \\</head>\n    \\<body>\n        \\<p>\n            hello world\n        \\</p>\n    \\</body>\n\\</html>\n```\n\n效果展示：\n\n\\<html>\n    \t\t\\<head>\n    \t    \\</head>\n    \t\t\\<body>\n        \t\t\\<p>\n            \t\thello world\n        \t\t\\</p>\n    \t\t\\</body>\n\t\t\\</html>\n\n**markdown**\n\n这里代码块只需要三个上斜引号符号引用就就不会被渲染了,而且还可以分辨是那种编程语言呦\n\n```html\n<html>\n    <head>\n    </head>\n    <body>\n        <p>\n            hello world\n        </p>\n    </body>\n</html>\n```\n\n### 11.图片，视频\n\n其实图片的引用就和超链接相差了一个!，其中的\"!\"标识着这是一个多媒体文件\n\n用法：\n\n```markdown\n![图片命名](地址 \"鼠标悬浮提示\")\n```\n\n在这里，除了链接到本地图片文件，还可以链接到网络图片\n\n视频的话，和图片引用没太差了。只是文件类型一样(hahaha~~~~)","tags":["markdown"],"categories":["markdown_study"]},{"title":"CSS权重计算","url":"%2F2019%2F09%2F19%2FCSS%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%2F","content":"\n# CSS权重计算\n\n&emsp;&emsp;一般情况，对于刚接触css3的小白来说，CSS样式权重的计算原理依旧是一头雾水。\n\n&emsp;&emsp;CSS样式的权重排序是：!important>行间样式>id>class|属性>标签选择器>通配符*(注:>表示高低，|表示同级)，但是CSS样式权重并不像我们想象的由高到低排序一样那么简单，其中的权重等级是可以简单计算的，没错，你没有听错！像四则运算一样\n\n下面的表格为CSS‘权重值’(0,1,10,100,1000并不为准确数值)\n<!--more-->\n\n| CSS样式           | 权重数值 |\n| :---------------- | -------- |\n| !important        | infinity |\n| 行间样式          | 1000     |\n| id                | 100      |\n| class\\|属性\\|伪类 | 10       |\n| 标签\\|伪元素      | 1        |\n| 通配符*           | 0        |\n\n&emsp;&emsp;根据资料查证：例如id，100并不是指id的一个权重值就是100，实际上这个100是一个进制数，不是2进制，也不是10进制；而是256进制，就是0到255后+1才是1，列如通配符的权重值0到标签、伪元素的权重值1，中时间实际上差了255。依次类推。\n\n&emsp;&emsp;!important的权重值虽然是正无穷，但其实也是可也计算的，比如正无穷+1或者*1，就是要比正无穷大，其原理是不管那种语言，在计算机中正无穷的值，都是一个有界的。不是数学上无界的一个慨念。\n\n下面以代码方式演示权重计算的方式：\n\n```css\n#home{\n    /*权重计算方式为1*100=100*/\n    height: 100vh;\n    position: relative;\n  }\n  #home .home-nav{\n    /*权重计算方式为1*100+1*10=110*/\n    /*css变量的使用*/\n    background: var(--color-tint);\n    color: #ffffff;\n    z-index: 10;\n  }\n```\n\n&emsp;&emsp;有时候我们或许遇到权重等级不够，样式被覆盖，不显示。或许多加一个id选择器，就会简单解决；我们还可以灵活利用浏览器提供的开发者工具，检测元素标签的属性，盒子大小....\n\n&emsp;&emsp;最后，第一次做博客小白，有什么缺漏的还请各位已经深入WEB的老司机多多指教批评\n\n","tags":["css"],"categories":["Web前端"]}]